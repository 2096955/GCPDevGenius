import streamlit as st
import uuid
from PIL import Image
import os
import base64


def login_page():
    # Customer login form as sidebar and enable session tabs only when the username is entered
    if 'acknowledged' not in st.session_state:
        st.session_state.acknowledged = False

    with st.sidebar:
        logo_col, _ = st.columns([30, 1])

        with logo_col:
            st.title("âœ¨ DevGenius App")
            st.title("Acknowledge")

            acknowledged = st.checkbox(
                "I acknowledge that I have read the disclaimer and agree to the terms and conditions",
                key="acknowledged",
                label_visibility="visible"
            )

            submit = st.button(
                "Let's Build GCP Solutions",
                disabled=not (acknowledged)
            )

            if submit:
                st.session_state.conversation_id = str(uuid.uuid4())
                st.session_state.user_authenticated = True
                st.rerun()

    # Description and Disclaimer
    # Main page content
    st.markdown("<h1 style='text-align: center;'>Welcome to DevGenius App</h1>", unsafe_allow_html=True)

    # Description section
    st.header("Description")
    st.write("""
    DevGenius is your AI-powered companion for Google Cloud Platform (GCP) solution architecture, designed to streamline and enhance your cloud development process. Our innovative platform empowers you to effortlessly design GCP architectures tailored to your specific requirements, ensuring that your cloud infrastructure aligns perfectly with your project goals. 
    With DevGenius, you can seamlessly generate infrastructure as code using powerful tools like Terraform and Deployment Manager, enabling faster deployment and easier management of your cloud resources. We also provide accurate cost estimates for GCP resources, helping you optimize your budget and make informed decisions. Moreover, DevGenius adheres to GCP best practices, ensuring that your solutions are not only efficient and cost-effective but also secure, reliable, and operationally excellent. 

    Whether you're a seasoned GCP professional or just starting your cloud journey, DevGenius is your go-to tool for building robust, scalable, and innovative GCP solutions.
    """)  # noqa

    # Add some space between sections
    st.markdown("---")

    # Disclaimer section
    st.header("Disclaimers")
    st.write("""
    - AI-Generated Content: DevGenius app utilizes Vertex AI to generate responses. While we strive for accuracy, the information provided may not always be complete, up-to-date, or error-free.

    - Not a Substitute for Professional Advice: The responses generated by DevGenius should not be considered as professional, legal, medical, financial, or expert advice. Always consult with qualified professionals for specific guidance in these areas.
    - Potential Biases: Despite our best efforts to minimize biases, the AI may inadvertently reflect biases present in its training data or algorithmic design.
    - Privacy and Data Usage: User interactions with DevGenius may be logged and analyzed for improvement purposes.
    - No Guarantee of Availability or Performance: We do not guarantee uninterrupted access to the chatbot or error-free operation.
    - Disclaimer of Liability: Google is not liable for any damages or losses resulting from the use of or reliance on information provided by DevGenius.
    - User Responsibility: Users are responsible for evaluating the appropriateness and accuracy of the DevGenius's responses for their specific needs and circumstances.
    - Intellectual Property: The chatbot's responses may not be used to infringe on any intellectual property rights.
    - Updates to Disclaimer: This disclaimer may be updated periodically. Please review it regularly for any changes.
    - The solutions provided are recommendations based on common architectural patterns
    - All generated code should be reviewed before deployment
    - Cost implications should be evaluated before implementing any solution
    - This tool is meant to assist in architecture design but does not replace proper planning and testing

    By using this DevGenius, you acknowledge that you have read, understood, and agreed to this disclaimer.
    """)  # noqa

    # Apply MAXIMUM FORCE styling for white background and black text
    st.markdown("""
        <style>
        /* GLOBAL RESET - FORCE WHITE BACKGROUND AND BLACK TEXT EVERYWHERE */
        /* Target everything with the most specific selectors */
        html, body, div, span, h1, h2, h3, h4, h5, h6, p, a, img, ol, ul, li, 
        fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td,
        article, aside, canvas, details, embed, figure, figcaption, footer, header, menu, 
        nav, output, section, summary, time, mark, audio, video, button, input, textarea, 
        .stMarkdown, .stText, .stCode, .stApp, .stSidebar, .stContainer, .stDataFrame,
        .stTabs, .stTab, .stTabContent, .stTextInput, .stButton, .stImage, .stImage img,
        [data-testid*="st"], [data-baseweb*="tab"], [data-baseweb*="panel"],
        svg, path, circle, rect, line, polygon, polyline, g, text, tspan {
            background-color: white !important;
            color: black !important;
            fill: black !important;
            border-color: #e0e0e0 !important;
        }
        
        /* Force white bg on main app components */
        .main, .block-container, .stApp, [data-testid="stAppViewContainer"], 
        [data-testid="stVerticalBlock"], [data-testid="stHorizontalBlock"],
        [data-testid="stSidebar"], [data-testid="stSidebarContent"],
        [data-testid="stChatMessage"], [data-testid="element-container"],
        [data-testid="stExpander"], [data-testid="stExpanderContent"],
        [data-testid="stMetric"], [data-testid="stDataFrame"] {
            background-color: white !important;
        }
        
        /* Chat messages with explicit white bg and borders */
        [data-testid="stChatMessage"], [data-testid="stChatMessageContent"] {
            background-color: white !important;
            border: 1px solid #e0e0e0 !important;
            border-radius: 5px !important;
            padding: 10px !important;
            margin: 5px 0 !important;
        }
        
        /* Markdown and text specifically */
        [data-testid="stMarkdownContainer"], [data-testid="stText"] {
            background-color: white !important;
            color: black !important;
            padding: 5px !important;
        }
        
        /* Make sure all tabs have white bg and black text */
        .stTabs [data-baseweb="tab-list"], .stTabs [data-baseweb="tab"],
        .stTabs [data-baseweb="tab-panel"], .stTabs [data-baseweb="tab-highlight"] {
            background-color: white !important;
            color: black !important;
            border: 1px solid #e0e0e0 !important;
        }
        
        /* Fix for active tab */
        .stTabs [aria-selected="true"] {
            background-color: #f0f0f0 !important;
            font-weight: bold !important;
        }
        
        /* Force white inside tab panels */
        .stTabs [data-baseweb="tab-panel"] * {
            background-color: white !important;
            color: black !important;
        }
        
        /* Apply to any custom classes we've defined */
        .gcp-option-tab, .tab-content, .sidebar-text, .sidebar-title {
            background-color: white !important;
            color: black !important;
            border: 1px solid #e0e0e0 !important;
            padding: 10px !important;
        }
        
        /* Fix for code blocks */
        pre, code, .stCodeBlock {
            background-color: #f9f9f9 !important;
            color: black !important;
            border: 1px solid #e0e0e0 !important;
            padding: 10px !important;
        }
        
        /* Fix for table rows/cols */
        table, th, td {
            background-color: white !important;
            color: black !important;
            border: 1px solid #e0e0e0 !important;
        }
        
        /* Headers should be very visible */
        h1, h2, h3, h4, h5, h6, .stMarkdown h1, .stMarkdown h2, .stMarkdown h3 {
            background-color: white !important;
            color: #4285F4 !important;
            font-weight: bold !important;
            padding: 5px !important;
            border-radius: 5px !important;
            border: 1px solid #e0e0e0 !important;
            margin: 10px 0 !important;
        }
        
        /* Make checkbox labels readable */
        .stCheckbox label, .stRadio label {
            color: black !important;
            background-color: white !important;
            padding: 5px !important;
            border-radius: 3px !important;
        }
        
        /* Ensure buttons are visible */
        .stButton button {
            background-color: #4285F4 !important;
            color: white !important;
            font-weight: bold !important;
        }
        </style>
    """, unsafe_allow_html=True)


def welcome_sidebar():
    # Use st.sidebar components directly instead of markdown with HTML
    st.sidebar.title("GCP Solution Builder")
    
    st.sidebar.markdown("""
    Welcome to the GCP Solution Builder! This tool helps you design, document, and estimate costs for GCP-native architectures using Vertex AI, Firestore, and Google Cloud Storage.
    """)
    
    st.sidebar.markdown("---")
    
    st.sidebar.markdown("""
    - Generate GCP architecture diagrams
    - Create Terraform and Deployment Manager templates
    - Get professional technical documentation
    - Estimate GCP service costs
    """)
    
    st.sidebar.markdown("---")
    
    st.sidebar.subheader("DevGenius for GCP")
    st.sidebar.caption("Powered by Vertex AI")


def create_tabs():
    # Add inline style to tabs before creating them
    st.markdown("""
    <style>
    /* Extra specific selectors for tabs */
    .stTabs [data-baseweb="tab"] {
        background-color: white !important;
        color: black !important;
        font-weight: bold !important;
    }
    .stTabs [data-baseweb="tab-panel"] {
        background-color: white !important;
        border: 1px solid #e0e0e0 !important;
        padding: 10px !important;
    }
    </style>
    """, unsafe_allow_html=True)
    
    tabs = st.tabs([
        "Chat",
        "Architecture",
        "Terraform",
        "Deployment Manager",
        "Documentation",
        "Cost Estimate",
    ])
    return tabs


def create_option_tabs():
    # Add extra specific styling for option tabs
    st.markdown("""
    <style>
    /* Even more specific selectors for option tabs */
    div[data-testid="stVerticalBlock"] > div[data-testid="stHorizontalBlock"] div[data-baseweb="tab"] {
        background-color: white !important;
        color: black !important;
        font-weight: bold !important;
        border: 1px solid #e0e0e0 !important;
        border-bottom: none !important;
        border-radius: 5px 5px 0 0 !important;
    }
    
    div[data-testid="stVerticalBlock"] > div[data-testid="stHorizontalBlock"] div[data-baseweb="tab-panel"] {
        background-color: white !important;
        color: black !important;
        border: 1px solid #e0e0e0 !important;
        padding: 15px !important;
        margin-top: -1px !important;
    }
    
    /* Target the content inside the tabs specifically */
    div[data-testid="stVerticalBlock"] > div[data-testid="stHorizontalBlock"] div[data-baseweb="tab-panel"] p,
    div[data-testid="stVerticalBlock"] > div[data-testid="stHorizontalBlock"] div[data-baseweb="tab-panel"] div,
    div[data-testid="stVerticalBlock"] > div[data-testid="stHorizontalBlock"] div[data-baseweb="tab-panel"] span {
        background-color: white !important;
        color: black !important;
        padding: 5px !important;
    }
    </style>
    """, unsafe_allow_html=True)
    
    option_tabs = st.tabs([
        "Vertex AI",
        "Firestore",
        "Cloud Storage",
    ])
    
    # Add background and text color to each tab content right after creation
    for i, tab in enumerate(option_tabs):
        with tab:
            st.markdown("""
            <div style="background-color: white; color: black; padding: 10px; border: 1px solid #e0e0e0; border-radius: 5px;">
                This tab content has forced white background and black text.
            </div>
            """, unsafe_allow_html=True)
    
    return option_tabs
